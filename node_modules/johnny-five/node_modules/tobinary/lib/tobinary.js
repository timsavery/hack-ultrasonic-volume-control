/*
 * tobinary
 * https://github.com/rwldrn/tobinary
 *
 * Copyright (c) 2012 Rick Waldron
 * Licensed under the MIT license.
 */


function lzeropad( val, width ) {
  return new Array( ( width + 1 ) - val.length ).join("0") + val;
}

// Return the binary representation of a number
function decimalToBinary( num ) {
  return lzeropad( num.toString(2), 8 );
}

// Return the binary representation of a string.
// Optionally separate each "character" representation with
// a custom separator.
function ToBinary( str, sep ) {
  if ( typeof str === "number" ) {
    return decimalToBinary( str );
  }

  return [].slice.call( String(str) ).map(function( val, k ) {
    return decimalToBinary( val.charCodeAt(0) );
  }).join( sep || "" );
}

// Expose abstract operation to global scope
module.exports = ToBinary;

// Augment String.prototype (this may go away)
// global.String.prototype.toBinary = function( sep ) {
//   return stringToBinary( this, sep || "" );
// };


// return [ 128, 64, 32, 16, 8, 4, 2, 1 ].map(function( val ) {
//   return num & val ? 1 : 0;
// }).join("");
