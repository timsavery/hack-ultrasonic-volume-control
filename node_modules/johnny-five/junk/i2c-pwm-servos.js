var Board = require("../lib/board.js"),
    events = require("events"),
    util = require("util"),
    es6 = require("es6-collections"),
    WeakMap = es6.WeakMap;

// Sensor instance private data
var servos = [],
    states = [],
    priv = new WeakMap();

function PWMServo( opts ) {
  if ( !(this instanceof PWMServo) ) {
    return new PWMServo( opts );
  }

  opts = Board.options( opts );

  // Hardware instance properties
  this.board = Board.mount( opts );
  this.firmata = this.board.firmata;

  // Pin that specific servo is on
  this.pin = opts.pin;

  // I2C Address
  this.address = opts.address || 0x40;

  // PWMServo instance properties
  this.range = opts.range || [ 0, 180 ];

  // Allow user defined ids, defaults to system ID
  this.id = opts.id || Board.uid();

  // The type of servo determines certain alternate
  // behaviours in the API
  this.type = opts.type || "standard";

  // Collect all movement history for this servo
  this.history = [/*
    {
      timestamp: Date.now(),
      degrees: degrees
    }
  */];

  // Interval/Sweep pointer
  this.interval = null;

  this.moving = false;

  // Create a non-writable "last" property
  // shortcut to access the last servo movement
  Object.defineProperty( this, "last", {
    get: function() {
      return this.history[ this.history.length - 1 ];
    }
  });

  // Allow "setup"instructions to come from
  // constructor options properties

  // If "startAt" true and center falsy
  // set servo to min or max degrees
  // if ( opts.startAt && !opts.center  ) {
  //   this[ opts.startAt ]();
  // }

  // // If "center" true set servo to 90deg
  // if ( opts.center ) {
  //  this.center();
  // }

  // Create a "state" entry for privately
  // storing the state of the servos
  servos.push( this );
  states.push( {} );
}

PWMServo.prototype.reset = function() {
  // Set
  this.firmata.sendI2CWriteRequest(
    this.address,
    // [ mode, value ]
    [ PWMServo.REG_ADDR, 0x0 ]
  );

};

PWMServo.prototype.setPWMFreq = function( freq ) {

  var prescale, prescaleval;

  prescaleval = ( (25000000 / 4096) / freq ) - 1;
  // prescaleval /= 4096;
  // prescaleval /= freq;
  // prescaleval -= 1;

  prescale = Math.floor( prescaleval + 0.5 );

  this.read( PWMServo.REG_ADDR, function( oldmode ) {
    var newmode;

    // sleep
    newmode = ( oldmode & 0x7F ) | 0x10;

    // put to sleep
    this.write( PWMServo.REG_ADDR, newmode );

    // set the prescaler
    this.write( PWMServo.PRESCALE, prescale );
    this.write( PWMServo.REG_ADDR, oldmode);

    setTimeout(function() {

      this.write( PWMServo.REG_ADDR, oldmode | 0x80 );

    }.bind(this), 5);
  });

  delay(5);
  this.write(PWMServo.REG_ADDR, oldmode | 0x80);


};

PWMServo.prototype.setPWM = function( servo, start, end ) {
  var four = 4 * servo;

  this.write( PWMServo.LED.ON_LO + four, start );
  this.write( PWMServo.LED.ON_HI + four, start >> 8 );

  this.write( PWMServo.LED.OFF_LO + four, end );
  this.write( PWMServo.LED.OFF_HI + four, end >> 8 );
};

PWMServo.prototype.move = function( degrees ) {

  map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());

  this.setPWM( this.pin,  )
};

PWMServo.prototype.write = function( addr, value ) {
  this.firmata.sendI2CWriteRequest( this.address, [ addr, value ] );
};
// TODO this should be read in a continuous loop and changes send via event
PWMServo.prototype.read = function( addr, callback ) {
  this.firmata.sendI2CWriteRequest( this.address, [ addr ]);
  this.firmata.sendI2CReadRequest( this.address, 1 , callback.bind(this) );
};

// PWMServo.PCA9685 = {
//   // SUBADDR: [
//   //   0x2, 0x3, 0x4
//   // ],
//   // SUBADR1: 0x2,
//   // SUBADR2: 0x3,
//   // SUBADR3: 0x4,

//   REG_ADDR: 0x0,
//   PRESCALE: 0xFE
// };

PWMServo.REG_ADDR = 0x0;
PWMServo.PRESCALE = 0xFE;

PWMServo.PULSE = {
  MIN: 544,
  MAX: 2400
};

PWMServo.LED = {
  ON_LO: 0x6,
  ON_HI: 0x7,
  OFF_LO: 0x8,
  OFF_HI: 0x9
};

PWMServo.ALL_LED = {
  ON_L: 0xFA,
  ON_H: 0xFB,
  OFF_L: 0xFC,
  OFF_H: 0xFD
};



board = new Board("/dev/tty.usbmodem411", function() {

  board.sendI2CConfig();

  board.on("string",function( string ) {
    console.log("string", string);
  });

  // Continuous measurement mode
  board.sendI2CWriteRequest( address, [ 0x02, 0x00 ] );

});
