var five = {};

five.LedControl = function( opts ) {

  console.log(opts);
  this.pins = {
    data: opts.pins.data,
    clock: opts.pins.clock,
    cs: opts.pins.cs
  };

  this.devices = 1;
  this.isMatrix = true;


  this.status = [];
  var i;

  for ( i = 0; i < 64; i++ ) {
    this.status[ i ] = 0x00;
  }


  this.firmata = {
    LOW: 0,
    HIGH: 1
  };
};

five.LedControl.prototype.row = function( addr, row, val /* 0 - 255 */ ) {
  var offset = addr * 8;

  if ( addr < this.devices ) {
    this.status[ offset + row ] = val;
    this.send( addr, row + 1, this.status[ offset + row ] );
  }
  return this;
};

five.LedControl.prototype.column = function( addr, col, val /* 0 - 255 */ ) {
  var row;

  if ( addr < this.devices ) {
    for ( row = 0; row < 8; row++ ) {
      val = val >> ( 7 - row );
      val = val & 0x01;
      this.led( addr, row, col, val );
    }
  }
  return this;
};

five.LedControl.prototype.digit = function( addr, digit, val, dp ) {
  var offset, v;

  if ( addr < this.devices ) {
    offset = addr * 8;

    v = five.LedControl.CHAR_TABLE[ val > 127 ? 32 : val ];

    if ( dp ) {
      v = v | 0x80;
    }

    this.status[ offset + digit ] = v;
    this.send( addr, digit + 1, v );
  }
  return this;
};

five.LedControl.prototype.char = function( addr, digit, val, dp ) {
  // in matrix mode, this takes two arguments:
  // addr and the character to display
  var character;

  if ( this.isMatrix ) {
    character = digit;

    five.LedControl.MATRIX_CHARS[ character ].forEach(function( rowByte, idx ) {
      process.nextTick(function() {
        this.row( addr, idx, rowByte );
      }.bind(this));
    }, this);
  } else {

    // in seven-segment mode, this takes four arguments, which
    // are just passed through to digit
    this.digit( addr, digit, val, dp );
  }
  return this;
};


five.LedControl.prototype.send = function( addr, opcode, data ) {
  var offset, maxBytes, spiData, i, j;

  offset = addr * 2;
  maxBytes = this.devices * 2;
  spiData = [];

  for ( i = 0; i < maxBytes; i++ ) {
    spiData[ i ] = 0;
  }

  spiData[ offset + 1 ] = opcode;
  spiData[ offset ] = data;

  console.log( this.pins.cs, this.firmata.LOW );

  for ( j = maxBytes; j > 0; j-- ) {
    console.log( this.pins.data, this.pins.clock, spiData[ j - 1 ] );
  }

  console.log( this.pins.cs, this.firmata.HIGH );

  return this;
};


five.LedControl.prototype.draw = function( addr, input ) {

  // Arrays of strings, numbers
  if ( Array.isArray(input) ) {
    // Enumerate input and queue a task to write
    // each "row" on nextTick
    input.forEach(function( row, k ) {
      // If |input| is an array of strings,
      // normalize each "row" by converting
      // spaces to "0". This allows users to create
      // human readable "art".
      // parse the string to int with a base 2 radix
      if ( typeof row === "string" ) {
        row = parseInt( row.replace(/ /g, "0"), 2 );
      }

      process.nextTick(function() {
        this.row( 0, k, row );
      }.bind(this));
    }, this);
  } else {

    // TODO:
    //  - handling byte arrays for MATRIX CHARS
    //  - seven segment
    //  - ?

    if ( five.LedControl.MATRIX_CHARS[ input ] ) {
      this.char( addr, input /* ? */ );
    }
  }

  return this;
};

var lc = new five.LedControl({
  pins: {
    data: 2,
    clock: 3,
    cs: 4
  },
  devices: 1,
  isMatrix: true
});


[
  {
    type: "zeros",
    data: [
      "01100110",
      "10011001",
      "10000001",
      "10000001",
      "01000010",
      "00100100",
      "00011000",
      "00000000"
    ],
  },
  {
    type: "spaces",
    data: [
      " 11  11 ",
      "1  11  1",
      "1      1",
      "1      1",
      " 1    1 ",
      "  1  1  ",
      "   11   ",
      "        "
    ]
  }
].forEach(function( test ) {

  console.log( test.type );

  lc.draw( 0, test.data );
});











five.LedControl.OP = {};

five.LedControl.OP.NOOP =        0x00;

five.LedControl.OP.DIGIT0 =      0x01;
five.LedControl.OP.DIGIT1 =      0x02;
five.LedControl.OP.DIGIT2 =      0x03;
five.LedControl.OP.DIGIT3 =      0x04;
five.LedControl.OP.DIGIT4 =      0x05;
five.LedControl.OP.DIGIT5 =      0x06;
five.LedControl.OP.DIGIT6 =      0x07;
five.LedControl.OP.DIGIT7 =      0x08;

five.LedControl.OP.DECODEMODE =  0x09;
five.LedControl.OP.INTENSITY =   0x0a;
five.LedControl.OP.SCANLIMIT =   0x0b;
five.LedControl.OP.SHUTDOWN =    0x0c;
five.LedControl.OP.DISPLAYTEST = 0x0f;

five.LedControl.CHAR_TABLE = [
  "01111110", // 0
  "00110000", // 1
  "01101101", // 2
  "01111001", // 3
  "00110011", // 4
  "01011011", // 5
  "01011111", // 6
  "01110000", // 7
  "01111111", // 8
  "01111011", // 9
  "01110111", // a
  "00011111", // b
  "00001101", // c
  "00111101", // d
  "01001111", // e
  "01000111", // f
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "10000000",
  "00000001",
  "10000000",
  "00000000",
  "01111110",
  "00110000",
  "01101101",
  "01111001",
  "00110011",
  "01011011",
  "01011111",
  "01110000",
  "01111111",
  "01111011",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "01110111",
  "00011111",
  "00001101",
  "00111101",
  "01001111",
  "01000111",
  "00000000",
  "00110111",
  "00000000",
  "00000000",
  "00000000",
  "00001110",
  "00000000",
  "00000000",
  "00000000",
  "01100111",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00001000",
  "00000000",
  "01110111",
  "00011111",
  "00001101",
  "00111101",
  "01001111",
  "01000111",
  "00000000",
  "00110111",
  "00000000",
  "00000000",
  "00000000",
  "00001110",
  "00000000",
  "00000000",
  "00000000",
  "01100111",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000",
  "00000000"
].map(function( str ) {
  return parseInt( str, 2 );
});

five.LedControl.MATRIX_CHARS = {
  "!" : [ 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00 ],
  '"' : [ 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00 ],
  "#" : [ 0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00 ],
  "$" : [ 0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00 ],
  "%" : [ 0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00 ],
  "&" : [ 0x0C, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00 ],
  "'" : [ 0x0C, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 ],
  "(" : [ 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00 ],
  ")" : [ 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00 ],
  "*" : [ 0x00, 0x04, 0x15, 0x0E, 0x15, 0x04, 0x00, 0x00 ],
  "+" : [ 0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00 ],
  "," : [ 0x00, 0x00, 0x00, 0x00, 0x0C, 0x04, 0x08, 0x00 ],
  "-" : [ 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00 ],
  "." : [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 ],
  "/" : [ 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00 ],
  "0" : [ 0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00 ],
  "1" : [ 0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00 ],
  "2" : [ 0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00 ],
  "3" : [ 0x1F, 0x02, 0x04, 0x02, 0x01, 0x11, 0x0E, 0x00 ],
  "4" : [ 0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x00 ],
  "5" : [ 0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E, 0x00 ],
  "6" : [ 0x06, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00 ],
  "7" : [ 0x1F, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x00 ],
  "8" : [ 0x1E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00 ],
  "9" : [ 0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x0C, 0x00 ],
  ":" : [ 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x00, 0x00 ],
  ";" : [ 0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x04, 0x08, 0x00 ],
  "<" : [ 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00 ],
  "=" : [ 0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00 ],
  ">" : [ 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00 ],
  "?" : [ 0x0E, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00 ],
  "@" : [ 0x0E, 0x11, 0x01, 0x0D, 0x15, 0x15, 0x0E, 0x00 ],
  "A" : [ 0x0E, 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x00 ],
  "B" : [ 0x1E, 0x09, 0x09, 0x0E, 0x09, 0x09, 0x1E, 0x00 ],
  "C" : [ 0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00 ],
  "D" : [ 0x1E, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1E, 0x00 ],
  "E" : [ 0x1F, 0x10, 0x10, 0x1F, 0x10, 0x10, 0x1F, 0x00 ],
  "F" : [ 0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00 ],
  "G" : [ 0x0E, 0x11, 0x10, 0x13, 0x11, 0x11, 0x0F, 0x00 ],
  "H" : [ 0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00 ],
  "I" : [ 0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00 ],
  "J" : [ 0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C, 0x00 ],
  "K" : [ 0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00 ],
  "L" : [ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00 ],
  "M" : [ 0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11, 0x00 ],
  "N" : [ 0x11, 0x19, 0x19, 0x15, 0x13, 0x13, 0x11, 0x00 ],
  "O" : [ 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 ],
  "P" : [ 0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00 ],
  "Q" : [ 0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x1D, 0x00 ],
  "R" : [ 0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11, 0x00 ],
  "S" : [ 0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, 0x00 ],
  "T" : [ 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00 ],
  "U" : [ 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00 ],
  "V" : [ 0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00 ],
  "W" : [ 0x11, 0x11, 0x11, 0x15, 0x15, 0x1B, 0x11, 0x00 ],
  "X" : [ 0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00 ],
  "Y" : [ 0x11, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x00 ],
  "Z" : [ 0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00 ],
  "[" : [ 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00 ],
  "\\": [ 0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00 ],
  "]" : [ 0x0E, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0E, 0x00 ],
  "^" : [ 0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00 ],
  "_" : [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00 ],
  "`" : [ 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 ],
  "a" : [ 0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00 ],
  "b" : [ 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x1E, 0x00 ],
  "c" : [ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00 ],
  "d" : [ 0x01, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0F, 0x00 ],
  "e" : [ 0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E, 0x00 ],
  "f" : [ 0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x00 ],
  "g" : [ 0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x0E, 0x00 ],
  "h" : [ 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00 ],
  "i" : [ 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E, 0x00 ],
  "j" : [ 0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0C, 0x00 ],
  "k" : [ 0x08, 0x08, 0x09, 0x0A, 0x0C, 0x0A, 0x09, 0x00 ],
  "l" : [ 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00 ],
  "m" : [ 0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15, 0x00 ],
  "n" : [ 0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00 ],
  "o" : [ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00 ],
  "p" : [ 0x00, 0x16, 0x19, 0x19, 0x16, 0x10, 0x10, 0x00 ],
  "q" : [ 0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01, 0x01, 0x00 ],
  "r" : [ 0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00 ],
  "s" : [ 0x00, 0x00, 0x0F, 0x10, 0x1E, 0x01, 0x1F, 0x00 ],
  "t" : [ 0x08, 0x08, 0x1C, 0x08, 0x08, 0x09, 0x06, 0x00 ],
  "u" : [ 0x00, 0x00, 0x12, 0x12, 0x12, 0x12, 0x0D, 0x00 ],
  "v" : [ 0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00 ],
  "w" : [ 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A, 0x00 ],
  "x" : [ 0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00 ],
  "y" : [ 0x00, 0x00, 0x11, 0x11, 0x13, 0x0D, 0x01, 0x0E ],
  "z" : [ 0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00 ],
  "{" : [ 0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00 ],
  "|" : [ 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00 ],
  "}" : [ 0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00 ],
  "~" : [ 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 ]
};
