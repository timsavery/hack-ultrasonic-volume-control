var Board = require("../lib/board.js"),
    events = require("events"),
    util = require("util");

// Sensor instance private data
var servos = [],
    states = [],
    priv = new WeakMap();


var PCA9685_SUBADR1 = 0x02;
var PCA9685_SUBADR2 = 0x03;
var PCA9685_SUBADR3 = 0x04;

var PCA9685_MODE1 = 0x00;
var PCA9685_PRESCALE = 0xFE;

var LED0_ON_L = 0x06;
var LED0_ON_H = 0x07;
var LED0_OFF_L = 0x08;
var LED0_OFF_H = 0x09;

var ALLLED_ON_L = 0xFA;
var ALLLED_ON_H = 0xFB;
var ALLLED_OFF_L = 0xFC;
var ALLLED_OFF_H = 0xFD;



function PWMServo( opts ) {

  if ( !(this instanceof PWMServo) ) {
    return new PWMServo( opts );
  }

  opts = Board.options( opts );

  // Hardware instance properties
  this.board = Board.mount( opts );
  this.firmata = this.board.firmata;
  this.addr = opts.addr || 0x40;

  this.pin = opts.pin;

  this.firmata.sendI2CConfig();

  // this.begin();
  this.reset();

  this.firmata.sendI2CWriteRequest( this.addr, [ 0x01 ] );



  setInterval(function() {

    this.firmata.sendI2CWriteRequest( this.addr, [ 0x01 ] );
    this.firmata.sendI2CReadRequest( this.addr, 1, function (data) {

      console.log( "read 1 byte", data );

      // this.firmata.sendI2CWriteRequest( this.addr, [ 0 ] );
      // this.firmata.sendI2CWriteRequest( this.addr, [ data | 0x10 ] );

    });

  }.bind(this), 500);


  // Wire.beginTransmission(_i2caddr);
  //   Wire.write(0);        //select register 0 for read
  //   Wire.endTransmission();
  //   Wire.requestFrom(_i2caddr, 1);   //request 1 byte read
  //   uint8_t reg0 = Wire.read();         //read contents of register 0
  //   Wire.beginTransmission(_i2caddr);
  //   Wire.write(0);         //select register 0 for write
  //   Wire.write(reg0 | 0x10);           //Set auto-increment bit in register 0
  //   Wire.endTransmission();
}

PWMServo.prototype.begin = function() {

};

PWMServo.prototype.reset = function() {
  this.write8( PCA9685_MODE1, 0x0 );
};

PWMServo.prototype.setPWMFreq = function( freq ) {
  var prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;


  var prescale = Math.floor( prescaleval + 0.5 );


  this.read8( PCA9685_MODE1, function( data ) {
    var oldmode = data;

    var newmode = ( oldmode & 0x7F ) | 0x10; // sleep

    this.write8( PCA9685_MODE1, newmode ); // go to sleep
    this.write8( PCA9685_PRESCALE, prescale ); // set the prescaler
    this.write8( PCA9685_MODE1, oldmode );

    setTimeout(function() {
      this.write8( PCA9685_MODE1, oldmode | 0x80 );
    }.bind(this), 10);
  }.bind(this));
};

PWMServo.prototype.setPWM = function( num, on, off ) {
  // this.write8( LED0_ON_L + 4 * num, on );
  // this.write8( LED0_ON_H + 4 * num, on >> 8 );
  // this.write8( LED0_OFF_L + 4 * num, off);
  // this.write8( LED0_OFF_H + 4 * num, off >> 8 );

  // this.write8( num, on );
  // this.write8( num, on >> 8 );
  // this.write8( num, off);
  // this.write8( num, off >> 8 );

  this.firmata.sendI2CWriteRequest( this.addr,
    [ LED0_ON_L + 4 * num, on, on >> 8, off, off >> 8 ]
  );


};

PWMServo.prototype.move = function( position ) {

  console.log( this.pin, position );
  this.setPWM( this.pin, 0, 600 );
};


PWMServo.prototype.read8 = function( addr, callback ) {
  this.firmata.sendI2CWriteRequest( this.addr, [ addr ] );
  this.firmata.sendI2CReadRequest( this.addr, 1, callback );
};

PWMServo.prototype.write8 = function( addr, d ) {
  this.firmata.sendI2CWriteRequest( this.addr,
    [ addr ]
  );
  this.firmata.sendI2CWriteRequest( this.addr,
    [ d ]
  );

  // PCA9685_MODE1
};


module.exports = PWMServo;
